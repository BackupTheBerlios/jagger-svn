groovyHome = System.getenv().'GROOVY_HOME'

// validate that 'GROOVY_HOME' has been defined
if ((groovyHome == null) || (groovyHome == '')) {
  println('Must set environment variable GROOVY_HOME to compile this project.')
  return
}

// declare reference to project folders
def base_dir = new File("").canonicalPath
def conf_dir = "${base_dir}/src/conf"
def java_source_dir = "${base_dir}/src/java" 
def groovy_source_dir = "${base_dir}/src/groovy"
def java_tests_dir = "${base_dir}/tests_src/java"
def groovy_tests_dir = "${base_dir}/tests_src/groovy"
def bin_dir = "${base_dir}/bin"
def docs_dir = "${base_dir}/docs"
def lib_dir = "${base_dir}/lib"

// declare folders used to create build artifacts
def target_dir = "${base_dir}/target"
def target_classes_dir = "${target_dir}/classes" 
def target_tests_dir = "${target_dir}/tests" 
def target_reports_dir = "${target_dir}/reports"
def build_dir = "${target_dir}/build" 
def build_lib_dir = "${build_dir}/lib"
def build_bin_dir = "${build_dir}/bin"

// name & version number of the project
Ant.property(file: 'build.properties')
//println Ant.project.properties
def project_name = Ant.project.properties.'project.name'
def version = Ant.project.properties.'project.version'
println "Building ${project_name}-${version}..."

// name of the deliverable
zip_name = "${project_name}-${version}.zip"

// The name of the jar file containing the project's Groovy and Java classes
jar_name = "${project_name}-${version}.jar"

// include targets provided by Gant
includeTargets << gant.targets.Clean
cleanPattern << [ '**/*~',  '**/*.bak' ]
cleanDirectory << target_dir
clobberDirectory << [target_dir]


def exec(cmd) {
    return Runtime.getRuntime().exec(["/bin/sh", "-c", cmd] as String[]).waitFor()
}


// declare the classpath used to compile 
Ant.path(id: 'compile_classpath') { 
    fileset(dir: groovyHome + '/lib', includes: '*.jar') 
    fileset(dir: lib_dir, includes: '*.jar')
}


// declare the groovy compiler task
Ant.taskdef(name: 'groovyc',
    classname: 'org.codehaus.groovy.ant.Groovyc',
    classpathref: 'compile_classpath')


/*
    create the folders required by the build
*/
task(initialize: 'Initialize prior to a build') {
    Ant.mkdir(dir: target_dir)
    Ant.mkdir(dir: target_classes_dir)
    Ant.mkdir(dir: target_tests_dir)
    Ant.mkdir(dir: target_reports_dir)
    Ant.mkdir(dir: build_dir)
    Ant.mkdir(dir: build_lib_dir)
    Ant.mkdir(dir: build_bin_dir)
}


/*
    target used to compile the Groovy and Java classes located in the src folder
    this target compiles the Java classes using the jars in the Groovy lib folder and the project lib folder
    as classpath. It then compile the groovy classes using the previous classpath plus the compiled Java classes
*/
task(compile: 'Compile all classes.') {
    depends(initialize)
    Ant.javac(srcdir: java_source_dir, destDir: target_classes_dir,
        source: Ant.project.properties.'java.source',
        target: Ant.project.properties.'java.target',
        debug: 'on', classpathref: 'compile_classpath')
    Ant.groovyc(srcdir: groovy_source_dir, destDir: target_classes_dir){
        classpath {
            path(refid: 'compile_classpath')
            pathelement(location: target_classes_dir)
        }
    }
}


/*
    target used to compile the Groovy and Java unit tests located in the test_src folder
    this target compiles using the jars in the Groovy lib folder and the project lib folder
    as classpath. This target is mainly used by the test target as a dependency
*/
task(compile_tests: 'Compile all the tests.') {
    depends(compile)
    Ant.javac(srcdir: java_tests_dir,
            destDir: target_tests_dir,
            source: '1.4', target: '1.4', debug: 'on') {
        classpath {
            path(refid: 'compile_classpath')
            pathelement(location: target_classes_dir)
        }
    }
    Ant.groovyc(srcdir: groovy_tests_dir,
            destdir: target_tests_dir) {
        classpath {
            path(refid: 'compile_classpath')
            pathelement(location: target_classes_dir)
        }
    }
}


/*
    executes all the unit tests in the project        
*/
task(test: 'Run all the tests in the build.') {
    depends(compile_tests)
    Ant.junit(printsummary: 'yes') {
        formatter(type: 'plain')
        batchtest(fork: 'yes', todir: target_reports_dir) {
            fileset(dir: target_tests_dir, includes: '**/*Test.class')
        }
        classpath {
            pathelement(location: target_tests_dir)
            pathelement(location: target_classes_dir)
            path(refid: 'compile_classpath')
        }
    }
}


/*
    creates a build folder that contains the project's main artifacts
    in a way that is suitable for packaging
*/
task(build: 'Create a build of the project') {
    depends(compile)

    // filterset for "build" filtering
    Ant.echoproperties(destfile: "${target_dir}/build-filter.properties") {
        propertyset {
            propertyref(prefix: "project.")
        }
    }
    Ant.filterset(id: 'build-filter') {
        filtersfile(file: "${target_dir}/build-filter.properties")
    }

    // copy configuration files
    Ant.copy(todir: target_classes_dir) {
        fileset(dir: conf_dir, includes: '*')
        filterset(refid: 'build-filter')
    }

    Ant.jar(destfile: build_lib_dir + '/' + jar_name,
            basedir: target_classes_dir){
        manifest{
            attribute(name: 'Built-By', value: "${System.getenv().'USER'}@webde.de")
            attribute(name: 'Main-Class', value: "${Ant.project.properties.'project.package'}.CLI")
        }
    }
  
    Ant.copy(todir: build_bin_dir) {
        fileset(dir: bin_dir, includes: '*.sh')
        mapper {
            globmapper(from: 'run.sh', to: project_name)
            globmapper(from: '*.sh', to: '*')
        }
        filterset(refid: 'build-filter')
    }
    //Ant.chmod(dir: build_bin_dir, includes='*', perm: '+x') {}
    assert 0 == exec("chmod a+x ${build_bin_dir}/*")

    Ant.copy(todir: build_dir) {
        fileset(dir: docs_dir, includes: '*')
    }

    Ant.copy(todir: build_lib_dir) {
        fileset(dir: lib_dir, includes: '*')
    }
}


/*
    packages the project build folder as a zip file
*/
task('package': 'Create a zip file containing a full binary distribution of the project'){
    depends(build) 

    Ant.zip(destfile: "${target_dir}/${zip_name}") {
        zipfileset(dir: build_dir, prefix: "${project_name}-${version}")
    }
}


/*
    packages the project build folder as a zip file
*/
task('package': 'Create a zip file containing a full binary distribution of the project'){
    depends(build) 

    Ant.zip(destfile: "${target_dir}/${zip_name}") {
        zipfileset(dir: build_dir, prefix: "${project_name}-${version}")
    }
}


/*
    build the website
*/
task('www': 'Build website tree from templates.') {
}


/*
    run tests by default.
*/
task('default': 'The default target, currently test.') {
    test()
}

